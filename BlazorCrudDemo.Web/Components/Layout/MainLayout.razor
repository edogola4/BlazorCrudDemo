@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="layout-container @(IsDarkMode ? "dark-theme" : "light-theme") @(IsMobile ? "mobile-layout" : "desktop-layout")">
    <!-- Sidebar -->
    <aside class="sidebar @(IsSidebarCollapsed ? "collapsed" : "expanded")" id="main-sidebar">
        <!-- Sidebar Header -->
        <div class="sidebar-header">
            <div class="sidebar-logo">
                @if (!IsSidebarCollapsed)
                {
                    <div class="sidebar-brand">
                        <div class="brand-icon">
                            <i class="bi bi-grid-3x3-gap"></i>
                        </div>
                        <h3 class="sidebar-title">Blazor CRUD Demo</h3>
                    </div>
                }
                else
                {
                    <div class="sidebar-icon-large">
                        <i class="bi bi-grid-3x3-gap"></i>
                    </div>
                }
            </div>
            <button class="sidebar-toggle-btn" @onclick="ToggleSidebar" title="@(IsSidebarCollapsed ? "Expand Sidebar" : "Collapse Sidebar")">
                <i class="bi @(IsSidebarCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></i>
            </button>
        </div>

        <!-- Navigation Menu -->
        <div class="sidebar-nav">
            <NavMenu />
        </div>

        <!-- User Profile Section -->
        <div class="sidebar-footer">
            <div class="user-profile">
                <div class="user-avatar">
                    <i class="bi bi-person-circle"></i>
                </div>
                @if (!IsSidebarCollapsed)
                {
                    <div class="user-info">
                        <div class="user-name">Brandon S.</div>
                        <div class="user-role">Administrator</div>
                    </div>
                }
            </div>
        </div>
    </aside>

    <!-- Main Content Area -->
    <div class="main-content @(IsSidebarCollapsed ? "sidebar-collapsed" : "sidebar-expanded")">
        <!-- Top Bar -->
        <TopBar IsDarkMode="IsDarkMode"
                IsMobile="IsMobile"
                NotificationCount="NotificationCount"
                IsDarkModeChanged="HandleThemeChanged"
                OnSearchCommand="HandleSearchCommand"
                OnToggleFullscreen="ToggleFullscreen" />

        <!-- Breadcrumb Navigation -->
        <div class="breadcrumb-container">
            <BreadcrumbNavigation />
        </div>

        <!-- Page Content -->
        <main class="page-content">
            @if (ShowSearchPalette)
            {
                <SearchCommandPalette @bind-Visible="ShowSearchPalette" OnCommandSelected="HandleCommandSelected" />
            }
            @Body
        </main>

        <!-- Footer -->
        <Footer />
    </div>

    <!-- Mobile Overlay -->
    @if (IsMobile && ShowMobileMenu)
    {
        <div class="mobile-overlay" @onclick="CloseMobileMenu"></div>
    }
</div>

<!-- Search Command Palette -->
<SearchCommandPalette @bind-Visible="ShowSearchPalette" OnCommandSelected="HandleCommandSelected" />

@code {
    private bool IsSidebarCollapsed { get; set; }
    private bool IsDarkMode { get; set; }
    private bool IsMobile { get; set; }
    private bool ShowMobileMenu { get; set; }
    private bool ShowSearchPalette { get; set; }
    private int NotificationCount { get; set; } = 3;

    protected override void OnInitialized()
    {
        // Initialize theme from localStorage or default to light
        IsDarkMode = GetStoredTheme();
        IsMobile = false; // Default to desktop, will be updated in OnAfterRenderAsync

        // Keyboard shortcuts will be initialized in OnAfterRenderAsync
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize keyboard shortcuts after rendering
            var dotNetObjectRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initializeKeyboardShortcuts", dotNetObjectRef);

            // Initialize responsive detection after rendering
            await JSRuntime.InvokeVoidAsync("initializeResponsiveDetection", dotNetObjectRef);

            // Update mobile state after rendering
            await UpdateMobileStateAsync();
        }
    }

    private bool GetStoredTheme()
    {
        // In a real app, this would check localStorage
        return false; // Default to light theme
    }

    private async Task<bool> IsMobileDeviceAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<bool>("isMobileDevice");
        }
        catch
        {
            // Fallback for server-side rendering
            return System.OperatingSystem.IsBrowser() ? await JSRuntime.InvokeAsync<bool>("isMobileDevice") : false;
        }
    }

    private async Task UpdateMobileStateAsync()
    {
        try
        {
            var wasMobile = IsMobile;
            IsMobile = await IsMobileDeviceAsync();

            if (wasMobile != IsMobile)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            // Log error in a real app
            Console.WriteLine($"Error updating mobile state: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task UpdateMobileState()
    {
        await UpdateMobileStateAsync();
    }

    private void ToggleSidebar()
    {
        IsSidebarCollapsed = !IsSidebarCollapsed;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleFullscreen()
    {
        JSRuntime.InvokeVoidAsync("toggleFullscreen");
    }

    private void HandleSearchCommand()
    {
        ShowSearchPalette = true;
        InvokeAsync(StateHasChanged);
    }

    private void HandleCommandSelected(string command)
    {
        ShowSearchPalette = false;
        // Navigate to the selected command/page
        Navigation.NavigateTo(command);
        InvokeAsync(StateHasChanged);
    }

    private void HandleThemeChanged()
    {
        IsDarkMode = !IsDarkMode;
        // In a real app, save to localStorage
        InvokeAsync(StateHasChanged);
    }

    private void CloseMobileMenu()
    {
        ShowMobileMenu = false;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void OnKeyboardShortcut(string shortcut)
    {
        switch (shortcut)
        {
            case "ctrl+k":
                HandleSearchCommand();
                break;
            case "ctrl+b":
                ToggleSidebar();
                break;
            case "ctrl+shift+l":
                IsDarkMode = !IsDarkMode;
                // In a real app, save to localStorage
                InvokeAsync(StateHasChanged);
                break;
        }
    }
}

<style>
    .sidebar-brand {
        display: flex;
        align-items: center;
        gap: var(--space-3);
    }

    .brand-icon {
        width: 2.5rem;
        height: 2.5rem;
        background: linear-gradient(135deg, var(--accent-600) 0%, var(--accent-700) 100%);
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        box-shadow: var(--shadow-sm);
    }

    .sidebar-icon-large {
        width: 2.5rem;
        height: 2.5rem;
        background: linear-gradient(135deg, var(--accent-600) 0%, var(--accent-700) 100%);
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        box-shadow: var(--shadow-sm);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        padding: var(--space-2);
        border-radius: var(--radius-lg);
        transition: var(--transition-colors);
    }

    .user-profile:hover {
        background: var(--primary-100);
    }

    .user-avatar {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--accent-600) 0%, var(--accent-700) 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        flex-shrink: 0;
    }

    .user-info {
        flex: 1;
        min-width: 0;
    }

    .user-name {
        font-weight: var(--font-weight-semibold);
        color: var(--primary-900);
        font-size: var(--font-size-sm);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .user-role {
        font-size: var(--font-size-xs);
        color: var(--primary-600);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
