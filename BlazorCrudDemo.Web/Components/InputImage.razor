@using Microsoft.AspNetCore.Components.Forms
@inherits ComponentBase

<div class="form-floating mb-3">
    <div class="image-upload-container"
         @ondragenter="OnDragEnter"
         @ondragleave="OnDragLeave"
         @ondragover="OnDragOver"
         @ondrop="OnDrop">
        <InputFile accept="image/*"
                   class="d-none"
                   id="@Id"
                   OnChange="OnFileSelected" />
        <label for="@Id" class="image-upload-label">
            @if (!string.IsNullOrEmpty(ImageUrl))
            {
                <div class="image-preview">
                    <img src="@ImageUrl" alt="Preview" class="img-fluid" />
                    <button type="button" class="btn btn-sm btn-danger remove-image" @onclick="RemoveImage">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            }
            else if (IsDragOver)
            {
                <div class="drag-over-state">
                    <i class="fas fa-cloud-upload-alt fa-3x text-primary"></i>
                    <p>Drop image here</p>
                </div>
            }
            else
            {
                <div class="upload-prompt">
                    <i class="fas fa-cloud-upload-alt fa-2x text-muted"></i>
                    <p>@PromptText</p>
                    <small class="text-muted">or click to browse</small>
                </div>
            }
        </label>
    </div>
    <label for="@Id">@Label</label>
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="form-text">@HelpText</div>
    }
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="invalid-feedback d-block">@_errorMessage</div>
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string Label { get; set; } = "Product Image";
    [Parameter] public string PromptText { get; set; } = "Drag & drop an image or click to browse";
    [Parameter] public string HelpText { get; set; } = "";
    [Parameter] public string ImageUrl { get; set; } = "";
    [Parameter] public EventCallback<string> ImageUrlChanged { get; set; }
    [Parameter] public EventCallback<IBrowserFile> OnImageUploaded { get; set; }
    [Parameter] public long MaxFileSize { get; set; } = 5 * 1024 * 1024; // 5MB

    private ElementReference inputFile;
    private bool IsDragOver { get; set; }
    private string _errorMessage = "";

    private void OnDragEnter(DragEventArgs e)
    {
        IsDragOver = true;
    }

    private void OnDragLeave(DragEventArgs e)
    {
        IsDragOver = false;
    }

    private void OnDragOver(DragEventArgs e)
    {
        // No PreventDefault needed in Blazor
    }

    private async Task OnDrop(DragEventArgs e)
    {
        IsDragOver = false;

        if (e.DataTransfer.Files.Length > 0)
        {
            // For drag and drop, we need to read the file as IBrowserFile
            // This is a limitation - in a real app you might need JS interop
            // For now, we'll use a placeholder approach
            var fileName = e.DataTransfer.Files[0];
            // Note: This won't work directly in Blazor - you'd need JS interop for full drag & drop file handling
            // For this demo, we'll just reset the drag state
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            await ProcessFile(e.File);
        }
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        if (file.Size > MaxFileSize)
        {
            _errorMessage = "File size exceeds the maximum allowed size.";
            return;
        }

        // Clear any previous error
        _errorMessage = "";

        // Generate a unique filename
        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var path = Path.Combine("wwwroot", "images", fileName);

        // Ensure directory exists
        Directory.CreateDirectory(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images"));

        // Save file
        await using var stream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(MaxFileSize).CopyToAsync(stream);

        var newImageUrl = $"/images/{fileName}";
        ImageUrl = newImageUrl;
        await ImageUrlChanged.InvokeAsync(newImageUrl);
        await OnImageUploaded.InvokeAsync(file);
    }

    private void RemoveImage()
    {
        ImageUrl = "";
        _errorMessage = "";
        ImageUrlChanged.InvokeAsync("");
    }
}
