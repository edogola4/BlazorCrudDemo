@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using BlazorCrudDemo.Web.Services
@using BlazorCrudDemo.Shared.DTOs
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IAuthenticationService AuthenticationService

<div class="layout-container @(IsDarkMode ? "dark-theme" : "light-theme") @(IsMobile ? "mobile-layout" : "desktop-layout")">
    <!-- Sidebar -->
    <aside class="sidebar @(IsSidebarCollapsed ? "collapsed" : "expanded")" id="main-sidebar">
        <!-- Sidebar Header -->
        <div class="sidebar-header">
            <div class="sidebar-logo">
                @if (!IsSidebarCollapsed)
                {
                    <div class="sidebar-brand">
                        <div class="brand-icon">
                            <i class="bi bi-grid-3x3-gap"></i>
                        </div>
                        <h3 class="sidebar-title">Blazor CRUD Demo</h3>
                    </div>
                }
                else
                {
                    <div class="sidebar-icon-large">
                        <i class="bi bi-grid-3x3-gap"></i>
                    </div>
                }
            </div>
            <button class="sidebar-toggle-btn" @onclick="ToggleSidebar" title="@(IsSidebarCollapsed ? "Expand Sidebar" : "Collapse Sidebar")">
                <i class="bi @(IsSidebarCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></i>
            </button>
        </div>

        <!-- Navigation Menu -->
        <div class="sidebar-nav">
            <NavMenu User="currentUser" />
        </div>

        <!-- User Profile Section -->
        <div class="sidebar-footer">
            <div class="user-profile">
                <div class="user-avatar">
                    @if (!string.IsNullOrEmpty(currentUser?.ProfileImageUrl))
                    {
                        <img src="@currentUser.ProfileImageUrl" alt="Profile" class="profile-image" />
                    }
                    else
                    {
                        <i class="bi bi-person-circle"></i>
                    }
                </div>
                @if (!IsSidebarCollapsed)
                {
                    <div class="user-info">
                        <div class="user-name">
                            @(string.IsNullOrEmpty(currentUser?.FirstName + currentUser?.LastName)
                                ? currentUser?.Email?.Split('@')[0] ?? "User"
                                : $"{currentUser?.FirstName} {currentUser?.LastName}")
                        </div>
                        <div class="user-role">
                            @(currentUser?.Roles?.FirstOrDefault() ?? "User")
                        </div>
                    </div>
                }
                <div class="dropdown" style="position: relative;">
                    <button class="btn btn-link dropdown-toggle" type="button" @onclick="ToggleUserMenu" @onclick:stopPropagation>
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    @if (showUserMenu)
                    {
                        <div class="dropdown-menu show">
                            <a class="dropdown-item" href="/account/settings">
                                <i class="bi bi-person-gear me-2"></i>Account Settings
                            </a>
                            <a class="dropdown-item" href="/admin/users" @onclick:preventDefault="true" @onclick="NavigateToUserManagement">
                                <i class="bi bi-people me-2"></i>User Management
                            </a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="#" @onclick:preventDefault="true" @onclick="HandleLogout">
                                <i class="bi bi-box-arrow-right me-2"></i>Logout
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </aside>

    <!-- Main Content Area -->
    <div class="main-content @(IsSidebarCollapsed ? "sidebar-collapsed" : "sidebar-expanded")">
        <!-- Top Bar -->
        <TopBar IsDarkMode="IsDarkMode"
                IsMobile="IsMobile"
                NotificationCount="NotificationCount"
                IsDarkModeChanged="HandleThemeChanged"
                OnSearchCommand="HandleSearchCommand"
                OnToggleFullscreen="ToggleFullscreen" />

        <!-- Breadcrumb Navigation -->
        <div class="breadcrumb-container">
            <BreadcrumbNavigation />
        </div>

        <!-- Page Content -->
        <main class="page-content">
            @if (ShowSearchPalette)
            {
                <SearchCommandPalette @bind-Visible="ShowSearchPalette" OnCommandSelected="HandleCommandSelected" />
            }
            @Body
        </main>

        <!-- Footer -->
        <Footer />
    </div>

    <!-- Mobile Overlay -->
    @if (IsMobile && ShowMobileMenu)
    {
        <div class="mobile-overlay" @onclick="CloseMobileMenu"></div>
    }
</div>

<!-- Search Command Palette -->
<SearchCommandPalette @bind-Visible="ShowSearchPalette" OnCommandSelected="HandleCommandSelected" />

@code {
    private bool IsDarkMode { get; set; }
    private bool IsMobile { get; set; }
    private bool IsSidebarCollapsed { get; set; }
    private bool ShowMobileMenu { get; set; }
    private bool ShowSearchPalette { get; set; }
    private int NotificationCount { get; set; } = 3;
    private bool showUserMenu = false;
    private ApplicationUserDto? currentUser;

    protected override async Task OnInitializedAsync()
    {
        // Load current user
        currentUser = await AuthenticationService.GetCurrentUserAsync();

        // Initialize theme from localStorage or default to light
        IsDarkMode = GetStoredTheme();
        IsMobile = false; // Default to desktop, will be updated in OnAfterRenderAsync

        // Keyboard shortcuts will be initialized in OnAfterRenderAsync
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize keyboard shortcuts after rendering
                var dotNetObjectRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("initializeKeyboardShortcuts", dotNetObjectRef);

                // Initialize responsive detection after rendering
                await JSRuntime.InvokeVoidAsync("initializeResponsiveDetection", dotNetObjectRef);
            }
            catch (JSException ex)
            {
                // JavaScript functions might not be available yet, log and continue
                Console.WriteLine($"JavaScript initialization error: {ex.Message}");
            }

            // Update mobile state after rendering
            await UpdateMobileStateAsync();
        }
    }

    private bool GetStoredTheme()
    {
        // In a real app, this would check localStorage
        return false; // Default to light theme
    }

    private async Task<bool> IsMobileDeviceAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<bool>("isMobileDevice");
        }
        catch (JSException)
        {
            // Fallback for server-side rendering or when JS isn't available
            return false;
        }
    }

    private async Task UpdateMobileStateAsync()
    {
        try
        {
            var wasMobile = IsMobile;
            IsMobile = await IsMobileDeviceAsync();

            if (wasMobile != IsMobile)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            // Log error in a real app
            Console.WriteLine($"Error updating mobile state: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task UpdateMobileState()
    {
        await UpdateMobileStateAsync();
    }

    private void ToggleSidebar()
    {
        IsSidebarCollapsed = !IsSidebarCollapsed;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleFullscreen()
    {
        try
        {
            JSRuntime.InvokeVoidAsync("toggleFullscreen");
        }
        catch (JSException ex)
        {
            // JavaScript function might not be available yet
            Console.WriteLine($"Fullscreen toggle error: {ex.Message}");
        }
    }

    private void HandleSearchCommand()
    {
        ShowSearchPalette = true;
        InvokeAsync(StateHasChanged);
    }

    private void HandleCommandSelected(string command)
    {
        ShowSearchPalette = false;
        // Navigate to the selected command/page
        Navigation.NavigateTo(command);
        InvokeAsync(StateHasChanged);
    }

    private void HandleThemeChanged()
    {
        IsDarkMode = !IsDarkMode;
        // In a real app, save to localStorage
        InvokeAsync(StateHasChanged);
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleLogout()
    {
        await AuthenticationService.LogoutAsync();
        Navigation.NavigateTo("/auth/login", forceLoad: true);
    }

    private void NavigateToUserManagement()
    {
        Navigation.NavigateTo("/admin/users");
        showUserMenu = false;
        InvokeAsync(StateHasChanged);
    }

    private void CloseMobileMenu()
    {
        ShowMobileMenu = false;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void OnKeyboardShortcut(string shortcut)
    {
        switch (shortcut)
        {
            case "ctrl+k":
                HandleSearchCommand();
                break;
            case "ctrl+b":
                ToggleSidebar();
                break;
            case "ctrl+shift+l":
                IsDarkMode = !IsDarkMode;
                // In a real app, save to localStorage
                InvokeAsync(StateHasChanged);
                break;
        }
    }
}

<style>
    .sidebar-brand {
        display: flex;
        align-items: center;
        gap: var(--space-3);
    }

    .brand-icon {
        width: 2.5rem;
        height: 2.5rem;
        background: #1e3a8a;
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        box-shadow: var(--shadow-sm);
    }

    .sidebar-icon-large {
        width: 2.5rem;
        height: 2.5rem;
        background: #1e3a8a;
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        box-shadow: var(--shadow-sm);
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        padding: var(--space-2);
        border-radius: var(--radius-lg);
        transition: var(--transition-colors);
        position: relative;
    }

    .user-profile:hover {
        background: #334155;
    }

    .user-avatar {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        background: #1e3a8a;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        flex-shrink: 0;
        overflow: hidden;
    }

    .profile-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
    }

    .user-info {
        flex: 1;
        min-width: 0;
    }

    .user-name {
        font-weight: var(--font-weight-semibold);
        color: #f8fafc;
        font-size: var(--font-size-sm);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .user-role {
        font-size: var(--font-size-xs);
        color: #cbd5e1;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .dropdown-menu {
        min-width: 200px;
        box-shadow: var(--shadow-lg);
        position: absolute;
        bottom: 100%;
        right: 0;
        margin-bottom: 0.5rem;
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: var(--radius-lg);
        z-index: 1001;
    }

    .dropdown-item {
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
        text-decoration: none;
        color: #374151;
        font-size: 0.875rem;
        transition: background-color 0.2s ease;
    }

    .dropdown-item:hover {
        background-color: #f8fafc;
        color: #0f172a;
    }

    .dropdown-item.text-danger {
        color: #dc2626 !important;
    }

    .dropdown-item.text-danger:hover {
        background-color: #fef2f2;
        color: #dc2626 !important;
    }

    .dropdown-divider {
        height: 1px;
        background: #e2e8f0;
        margin: 0.5rem 0;
    }
</style>
