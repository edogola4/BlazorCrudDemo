// <auto-generated />
using System;
using BlazorCrudDemo.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorCrudDemo.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251015054414_AddAuditFieldsToProducts")]
    partial class AddAuditFieldsToProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("BlazorCrudDemo.Shared.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder")
                        .HasDatabaseName("IX_Categories_DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Categories_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Categories_Name");

                    b.ToTable("Categories", null, t =>
                        {
                            t.HasCheckConstraint("CK_Categories_DisplayOrder_NonNegative", "[DisplayOrder] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(5880),
                            Description = "Electronic devices and accessories",
                            DisplayOrder = 1,
                            Icon = "fas fa-laptop",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(5880),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(5890),
                            Description = "Books and educational materials",
                            DisplayOrder = 2,
                            Icon = "fas fa-book",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(5890),
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6040),
                            Description = "Fashion and apparel items",
                            DisplayOrder = 3,
                            Icon = "fas fa-tshirt",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6040),
                            Name = "Clothing"
                        });
                });

            modelBuilder.Entity("BlazorCrudDemo.Shared.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("SKU");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("Stock");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Products_CategoryId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Products_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_SKU");

                    b.HasIndex("CategoryId", "IsActive")
                        .HasDatabaseName("IX_Products_CategoryId_IsActive");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasCheckConstraint("CK_Products_Price_Positive", "[Price] > 0");

                            t.HasCheckConstraint("CK_Products_Stock_NonNegative", "[Stock] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6300),
                            Description = "High-performance laptop for professionals",
                            ImageUrl = "https://example.com/macbook-pro.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6300),
                            Name = "MacBook Pro 16-inch",
                            Price = 2399.99m,
                            SKU = "MBP16-001",
                            Stock = 15
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6310),
                            Description = "Latest smartphone with advanced camera system",
                            ImageUrl = "https://example.com/iphone-15-pro.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6310),
                            Name = "iPhone 15 Pro",
                            Price = 999.99m,
                            SKU = "IPH15P-001",
                            Stock = 25
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6320),
                            Description = "A Handbook of Agile Software Craftsmanship",
                            ImageUrl = "https://example.com/clean-code.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6320),
                            Name = "Clean Code",
                            Price = 39.99m,
                            SKU = "CC-BOOK-001",
                            Stock = 50
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6330),
                            Description = "Elements of Reusable Object-Oriented Software",
                            ImageUrl = "https://example.com/design-patterns.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6330),
                            Name = "Design Patterns",
                            Price = 49.99m,
                            SKU = "DP-BOOK-001",
                            Stock = 30
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6330),
                            Description = "Comfortable 100% cotton t-shirt",
                            ImageUrl = "https://example.com/cotton-tshirt.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 10, 15, 5, 44, 12, 928, DateTimeKind.Utc).AddTicks(6330),
                            Name = "Cotton T-Shirt",
                            Price = 19.99m,
                            SKU = "TSHIRT-COT-001",
                            Stock = 100
                        });
                });

            modelBuilder.Entity("BlazorCrudDemo.Shared.Models.Product", b =>
                {
                    b.HasOne("BlazorCrudDemo.Shared.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlazorCrudDemo.Shared.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
