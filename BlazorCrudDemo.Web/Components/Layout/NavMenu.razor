@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using BlazorCrudDemo.Web.Services
@using BlazorCrudDemo.Shared.DTOs
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="nav-menu @(IsMobile ? "mobile-nav" : "desktop-nav") @(IsCollapsed ? "collapsed" : "")">
    <!-- Navigation Items -->
    <nav class="nav-items">

        <!-- Home -->
        <div class="nav-item @(IsActive("/") ? "active" : "")" @onclick="() => NavigateToHome()">
            <NavLink href="/" class="nav-link" Match="NavLinkMatch.All">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-house-door-fill nav-icon"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text">Dashboard</span>
                    }
                    else
                    {
                        <span class="nav-tooltip">Dashboard</span>
                    }
                </div>
                @if (IsActive("/"))
                {
                    <div class="nav-indicator"></div>
                }
            </NavLink>
        </div>

        <!-- Search -->
        <div class="nav-item @(IsActive("/products/search") ? "active" : "")" @onclick="() => NavigateToSearch()">
            <NavLink href="products/search" class="nav-link">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-search nav-icon"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text">Search</span>
                    }
                    else
                    {
                        <span class="nav-tooltip">Search</span>
                    }
                </div>
                @if (IsActive("/products/search"))
                {
                    <div class="nav-indicator"></div>
                }
            </NavLink>
        </div>

        <!-- Products -->
        <div class="nav-item @(IsActive("/products") ? "active" : "")" @onclick="() => NavigateToProducts()">
            <NavLink href="products" class="nav-link">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-box-seam nav-icon"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text">Products</span>
                    }
                    else
                    {
                        <span class="nav-tooltip">Products</span>
                    }
                </div>
                @if (IsActive("/products"))
                {
                    <div class="nav-indicator"></div>
                }
            </NavLink>
        </div>

        <!-- Categories -->
        <div class="nav-item @(IsActive("/categories") ? "active" : "")" @onclick="() => NavigateToCategories()">
            <NavLink href="categories" class="nav-link">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-folder nav-icon"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text">Categories</span>
                    }
                    else
                    {
                        <span class="nav-tooltip">Categories</span>
                    }
                </div>
                @if (IsActive("/categories"))
                {
                    <div class="nav-indicator"></div>
                }
            </NavLink>
        </div>

        <!-- Admin Section (Only for Admin users) -->
        @if (currentUser != null && currentUser.Roles.Contains("Admin"))
        {
            <!-- Admin Separator -->
            <div class="nav-separator">
                @if (!IsCollapsed)
                {
                    <span>Administration</span>
                }
            </div>

            <!-- User Management -->
            <div class="nav-item @(IsActive("/admin/users") ? "active" : "")" @onclick="() => NavigateToUserManagement()">
                <NavLink href="admin/users" class="nav-link">
                    <div class="nav-icon-wrapper">
                        <i class="bi bi-people nav-icon"></i>
                        @if (!IsCollapsed)
                        {
                            <span class="nav-text">User Management</span>
                        }
                        else
                        {
                            <span class="nav-tooltip">User Management</span>
                        }
                    </div>
                    @if (IsActive("/admin/users"))
                    {
                        <div class="nav-indicator"></div>
                    }
                </NavLink>
            </div>

            <!-- Audit Logs -->
            <div class="nav-item @(IsActive("/admin/audit") ? "active" : "")" @onclick="() => NavigateToAuditLogs()">
                <NavLink href="admin/audit" class="nav-link">
                    <div class="nav-icon-wrapper">
                        <i class="bi bi-journal-text nav-icon"></i>
                        @if (!IsCollapsed)
                        {
                            <span class="nav-text">Audit Logs</span>
                        }
                        else
                        {
                            <span class="nav-tooltip">Audit Logs</span>
                        }
                    </div>
                    @if (IsActive("/admin/audit"))
                    {
                        <div class="nav-indicator"></div>
                    }
                </NavLink>
            </div>

            <!-- Reports -->
            <div class="nav-item @(IsActive("/admin/reports") ? "active" : "")" @onclick="() => NavigateToReports()">
                <NavLink href="admin/reports" class="nav-link">
                    <div class="nav-icon-wrapper">
                        <i class="bi bi-bar-chart nav-icon"></i>
                        @if (!IsCollapsed)
                        {
                            <span class="nav-text">Reports</span>
                        }
                        else
                        {
                            <span class="nav-tooltip">Reports</span>
                        }
                    </div>
                    @if (IsActive("/admin/reports"))
                    {
                        <div class="nav-indicator"></div>
                    }
                </NavLink>
            </div>
        }

        <!-- Account Section -->
        <div class="nav-separator">
            @if (!IsCollapsed)
            {
                <span>Account</span>
            }
        </div>

        <!-- Account Settings -->
        <div class="nav-item @(IsActive("/account/settings") ? "active" : "")" @onclick="() => NavigateToAccountSettings()">
            <NavLink href="account/settings" class="nav-link">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-person-gear nav-icon"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text">Account Settings</span>
                    }
                    else
                    {
                        <span class="nav-tooltip">Account Settings</span>
                    }
                </div>
                @if (IsActive("/account/settings"))
                {
                    <div class="nav-indicator"></div>
                }
            </NavLink>
        </div>

        <!-- Profile -->
        <div class="nav-item @(IsActive("/account/profile") ? "active" : "")" @onclick="() => NavigateToProfile()">
            <NavLink href="account/profile" class="nav-link">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-person-circle nav-icon"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text">Profile</span>
                    }
                    else
                    {
                        <span class="nav-tooltip">Profile</span>
                    }
                </div>
                @if (IsActive("/account/profile"))
                {
                    <div class="nav-indicator"></div>
                }
            </NavLink>
        </div>

        <!-- Logout -->
        <div class="nav-item logout-item" @onclick="HandleLogout">
            <div class="nav-link">
                <div class="nav-icon-wrapper">
                    <i class="bi bi-box-arrow-right nav-icon text-danger"></i>
                    @if (!IsCollapsed)
                    {
                        <span class="nav-text text-danger">Logout</span>
                    }
                    else
                    {
                        <span class="nav-tooltip text-danger">Logout</span>
                    }
                </div>
            </div>
        </div>
    </nav>

    <!-- Recently Viewed Section -->
    @if (!IsCollapsed && RecentlyViewed.Any())
    {
        <div class="recently-viewed">
            <div class="recently-viewed-header">
                <i class="bi bi-clock-history me-2"></i>
                <span>Recently Viewed</span>
            </div>
            <div class="recently-viewed-items">
                @foreach (var item in RecentlyViewed.Take(3))
                {
                    <div class="recently-viewed-item" @onclick="() => NavigateToPage(item.Url)">
                        <div class="recent-icon">
                            <i class="bi @item.Icon"></i>
                        </div>
                        <div class="recent-info">
                            <div class="recent-title">@item.Title</div>
                            <div class="recent-time">@item.TimeAgo</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public ApplicationUserDto? User { get; set; }
    private ApplicationUserDto? currentUser;

    private class RecentlyViewedItem
    {
        public string Title { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
        public string TimeAgo { get; set; } = string.Empty;
        public DateTime ViewedAt { get; set; } = DateTime.Now;
    }

    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public bool IsMobile { get; set; }
    private List<RecentlyViewedItem> RecentlyViewed { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = User ?? await AuthenticationService.GetCurrentUserAsync();

        // Track navigation for recently viewed
        Navigation.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Update recently viewed items
        var path = new Uri(e.Location).AbsolutePath;
        AddToRecentlyViewed(path);
        UpdateTimeAgo();
    }

    private void AddToRecentlyViewed(string url)
    {
        // Don't add if it's already the most recent
        if (RecentlyViewed.Any() && RecentlyViewed[0].Url == url)
            return;

        // Remove if already exists
        var existing = RecentlyViewed.FirstOrDefault(x => x.Url == url);
        if (existing != null)
        {
            RecentlyViewed.Remove(existing);
        }

        var title = GetPageTitle(url);
        var icon = GetPageIcon(url);

        var item = new RecentlyViewedItem
        {
            Title = title,
            Icon = icon,
            Url = url,
            TimeAgo = "Just now",
            ViewedAt = DateTime.Now
        };

        RecentlyViewed.Insert(0, item);

        // Keep only last 5 items
        if (RecentlyViewed.Count > 5)
        {
            RecentlyViewed = RecentlyViewed.Take(5).ToList();
        }

        InvokeAsync(StateHasChanged);
    }

    private void UpdateTimeAgo()
    {
        foreach (var item in RecentlyViewed)
        {
            var elapsed = DateTime.Now - item.ViewedAt;
            item.TimeAgo = elapsed.TotalMinutes < 1 ? "Just now" :
                           elapsed.TotalMinutes < 60 ? $"{(int)elapsed.TotalMinutes} min ago" :
                           elapsed.TotalHours < 24 ? $"{(int)elapsed.TotalHours}h ago" :
                           $"{(int)elapsed.TotalDays}d ago";
        }
    }

    private string GetPageTitle(string url)
    {
        return url switch
        {
            "/" => "Dashboard",
            "/products/search" or "/products/search/" => "Search Products",
            "/products" => "Products",
            "/categories" => "Categories",
            "/admin/users" => "User Management",
            "/admin/audit" => "Audit Logs",
            "/admin/reports" => "Reports",
            "/account/settings" => "Account Settings",
            "/account/profile" => "Profile",
            _ => "Unknown Page"
        };
    }

    private string GetPageIcon(string url)
    {
        return url switch
        {
            "/" => "bi-house-door-fill",
            "/products/search" or "/products/search/" => "bi-search",
            "/products" => "bi-box-seam",
            "/categories" => "bi-folder",
            "/admin/users" => "bi-people",
            "/admin/audit" => "bi-journal-text",
            "/admin/reports" => "bi-bar-chart",
            "/account/settings" => "bi-person-gear",
            "/account/profile" => "bi-person-circle",
            _ => "bi-circle"
        };
    }

    private bool IsActive(string href)
    {
        var currentUrl = new Uri(Navigation.Uri).AbsolutePath;
        if (href == "/" && currentUrl == "/") return true;
        if (href == "/products/search" && currentUrl.StartsWith("/products/search")) return true;
        return currentUrl == href;
    }

    private void NavigateToHome() => Navigation.NavigateTo("/");
    private void NavigateToProducts() => Navigation.NavigateTo("/products");
    private void NavigateToCategories() => Navigation.NavigateTo("/categories");
    private void NavigateToSearch() => Navigation.NavigateTo("/products/search");
    private void NavigateToUserManagement() => Navigation.NavigateTo("/admin/users");
    private void NavigateToAuditLogs() => Navigation.NavigateTo("/admin/audit");
    private void NavigateToReports() => Navigation.NavigateTo("/admin/reports");
    private void NavigateToAccountSettings() => Navigation.NavigateTo("/account/settings");
    private void NavigateToProfile() => Navigation.NavigateTo("/account/profile");
    private void NavigateToPage(string url) => Navigation.NavigateTo(url);

    private async Task HandleLogout()
    {
        await AuthenticationService.LogoutAsync();
        Navigation.NavigateTo("/auth/login", forceLoad: true);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}

<style>
    .nav-menu {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: width 0.3s ease;
    }

    .nav-items {
        flex: 1;
        padding: 0.5rem 0;
        overflow-y: auto;
        overflow-x: hidden;
    }

    /* Custom scrollbar */
    .nav-items::-webkit-scrollbar {
        width: 4px;
    }

    .nav-items::-webkit-scrollbar-track {
        background: transparent;
    }

    .nav-items::-webkit-scrollbar-thumb {
        background: #475569;
        border-radius: 2px;
    }

    .nav-items::-webkit-scrollbar-thumb:hover {
        background: #64748b;
    }

    .nav-item {
        position: relative;
        margin: 0.25rem 0;
    }

    .nav-link {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        color: #cbd5e1;
        text-decoration: none;
        border-radius: 0.375rem;
        margin: 0 0.5rem;
        transition: all 0.2s ease;
        position: relative;
    }

    .nav-link:hover {
        background-color: #334155;
        color: #f8fafc;
    }

    .nav-icon-wrapper {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        width: 100%;
        position: relative;
    }

    .nav-icon {
        font-size: 1.25rem;
        min-width: 1.25rem;
        text-align: center;
        transition: all 0.2s ease;
        color: #cbd5e1;
    }

    .nav-text {
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        transition: opacity 0.2s ease;
    }

    /* Tooltip for collapsed state */
    .nav-tooltip {
        position: absolute;
        left: 100%;
        margin-left: 1rem;
        padding: 0.5rem 0.75rem;
        background: #1e293b;
        color: white;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        white-space: nowrap;
        opacity: 0;
        pointer-events: none;
        transform: translateX(-10px);
        transition: all 0.2s ease;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }

    .nav-tooltip::before {
        content: '';
        position: absolute;
        left: -4px;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-top: 4px solid transparent;
        border-bottom: 4px solid transparent;
        border-right: 4px solid #1e293b;
    }

    .collapsed .nav-link:hover .nav-tooltip {
        opacity: 1;
        transform: translateX(0);
    }

    .nav-indicator {
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 3px;
        height: 60%;
        background: #1e3a8a;
        border-radius: 0 2px 2px 0;
    }

    /* Active state */
    .nav-item.active .nav-link {
        background-color: #334155;
        color: #f8fafc;
    }

    .nav-item.active .nav-icon {
        color: #f8fafc;
    }

    /* Nav separator */
    .nav-separator {
        margin: 1rem 0.5rem 0.5rem;
        padding: 0 0.5rem;
        border-top: 1px solid #334155;
        padding-top: 0.5rem;
    }

    .nav-separator span {
        font-size: 0.75rem;
        font-weight: 600;
        color: #cbd5e1;
        opacity: 0.7;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    /* Logout item styling */
    .logout-item .nav-link {
        color: #cbd5e1;
    }

    .logout-item .nav-link:hover {
        background-color: #334155;
        color: #f8fafc;
    }

    .logout-item .nav-icon {
        color: #cbd5e1;
    }

    .text-danger {
        color: #dc2626 !important;
    }

    /* Recently Viewed Section */
    .recently-viewed {
        border-top: 1px solid #334155;
        padding: 1rem 0.5rem;
        margin-top: auto;
        opacity: 1;
        transition: opacity 0.3s ease;
    }

    .collapsed .recently-viewed {
        display: none;
    }

    .recently-viewed-header {
        display: flex;
        align-items: center;
        padding: 0 0.5rem 0.5rem;
        color: #cbd5e1;
        opacity: 0.8;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .recently-viewed-items {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .recently-viewed-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
        color: #cbd5e1;
    }

    .recently-viewed-item:hover {
        background-color: #334155;
    }

    .recent-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #334155;
        border-radius: 50%;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

    .recent-info {
        flex: 1;
        min-width: 0;
    }

    .recent-title {
        font-size: 0.875rem;
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .recent-time {
        font-size: 0.75rem;
        opacity: 0.7;
        white-space: nowrap;
    }

    /* Collapsed state adjustments */
    .collapsed .nav-link {
        justify-content: center;
        padding: 0.75rem 0.5rem;
    }

    .collapsed .nav-icon-wrapper {
        justify-content: center;
    }

    .collapsed .nav-text {
        display: none;
    }

    /* Mobile styles */
    .mobile-nav {
        width: 100%;
    }

    .mobile-nav .nav-items {
        padding: 0.25rem 0;
    }

    .mobile-nav .nav-link {
        padding: 0.625rem 0.75rem;
        margin: 0 0.25rem;
    }

    .mobile-nav .nav-icon {
        font-size: 1.125rem;
    }

    .mobile-nav .nav-text {
        font-size: 0.875rem;
    }

    .mobile-nav .recently-viewed {
        padding: 0.75rem 0.25rem;
    }

    /* High contrast mode support */
    @@media (prefers-contrast: high) {
        .nav-link:hover {
            background-color: #334155;
        }

        .nav-item.active .nav-link {
            background-color: #334155;
            border: 1px solid #1e3a8a;
        }

        .nav-indicator {
            width: 4px;
        }
    }

    /* Reduced motion support */
    @@media (prefers-reduced-motion: reduce) {
        .nav-menu,
        .nav-link,
        .nav-icon,
        .nav-text,
        .nav-tooltip,
        .recently-viewed {
            transition: none;
        }
    }

    /* Dark mode adjustments */
    @@media (prefers-color-scheme: dark) {
        .nav-tooltip {
            background: #0f172a;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
        }

        .nav-tooltip::before {
            border-right-color: #0f172a;
        }
    }
    </style>