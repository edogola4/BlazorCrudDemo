@using BlazorCrudDemo.Shared.DTOs
@using Microsoft.AspNetCore.Components.Web

<div class="category-card card h-100 shadow-sm @GetCardClasses()"
     @onclick="HandleCardClick"
     draggable="@Draggable"
     @ondragstart="HandleDragStart"
     @ondragend="HandleDragEnd"
     style="@GetCardStyle()">

    <!-- Card Header with Icon and Actions -->
    <div class="card-header d-flex justify-content-between align-items-start p-3">
        <div class="d-flex align-items-center flex-grow-1">
            <!-- Category Icon -->
            <div class="category-icon me-3 @(IsExpanded ? "expanded" : "")">
                <i class="@GetIconClass() fa-2x"></i>
            </div>

            <!-- Category Info -->
            <div class="flex-grow-1">
                <h6 class="card-title mb-1 text-truncate @GetTitleClasses()">@Category.Name</h6>
                <div class="category-meta">
                    <span class="badge bg-@GetStatusBadgeClass() me-2">
                        @Category.Status
                    </span>
                    @if (Category.HasProducts)
                    {
                        <small class="text-muted">
                            <i class="fas fa-box me-1"></i>@Category.ProductCount product@(Category.ProductCount == 1 ? "" : "s")
                        </small>
                    }
                    else
                    {
                        <small class="text-muted">No products</small>
                    }
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="category-actions d-flex gap-1">
            @if (Category.HasProducts)
            {
                <button class="btn btn-sm @(IsExpanded ? "btn-info" : "btn-outline-info")"
                        @onclick="ToggleExpand"
                        @onclick:stopPropagation="true"
                        title="@(IsExpanded ? "Collapse" : "Show products")">
                    <i class="fas fa-@(IsExpanded ? "compress-alt" : "expand-alt")"></i>
                </button>
            }

            <button class="btn btn-sm btn-outline-primary"
                    @onclick="Edit"
                    @onclick:stopPropagation="true"
                    title="Edit category">
                <i class="fas fa-edit"></i>
            </button>

            <button class="btn btn-sm btn-outline-danger"
                    @onclick="Delete"
                    @onclick:stopPropagation="true"
                    title="Delete category">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </div>

    <!-- Card Body with Description and Stats -->
    <div class="card-body p-3">
        @if (!string.IsNullOrEmpty(Category.Description))
        {
            <p class="card-text small text-muted mb-3">
                @Category.TruncatedDescription
            </p>
        }

        <!-- Category Statistics -->
        <div class="category-stats d-flex justify-content-between text-center">
            <div class="stat-item">
                <div class="stat-value">@Category.ProductCount</div>
                <div class="stat-label">Total Products</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">@Category.ActiveProductCount</div>
                <div class="stat-label">Active</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">@(Category.ProductCount - Category.ActiveProductCount)</div>
                <div class="stat-label">Inactive</div>
            </div>
        </div>
    </div>

    <!-- Card Footer with Dates -->
    <div class="card-footer p-3 bg-light">
        <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">
                <i class="fas fa-calendar me-1"></i>
                Created: @Category.CreatedDate.ToString("MMM dd, yyyy")
            </small>
            <small class="text-muted">
                Order: #@Category.DisplayOrder
            </small>
        </div>
    </div>
</div>

@code {
    [Parameter] public CategoryDto Category { get; set; } = default!;
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public bool Draggable { get; set; } = true;
    [Parameter] public EventCallback<CategoryDto> OnEdit { get; set; }
    [Parameter] public EventCallback<CategoryDto> OnDelete { get; set; }
    [Parameter] public EventCallback<CategoryDto> OnToggleExpand { get; set; }

    private bool IsDragging { get; set; }

    private string GetCardClasses()
    {
        var classes = new List<string> { "category-card" };

        if (IsDragging)
            classes.Add("dragging");

        if (Category.IsActive)
            classes.Add("active-category");
        else
            classes.Add("inactive-category");

        if (Category.HasProducts)
            classes.Add("has-products");
        else
            classes.Add("no-products");

        return string.Join(" ", classes);
    }

    private string GetCardStyle()
    {
        var styles = new List<string>();

        if (Category.IsActive)
        {
            // Generate a subtle gradient based on category name
            var hue = Math.Abs(Category.Name?.GetHashCode() ?? 0) % 360;
            styles.Add($"background: linear-gradient(135deg, hsl({hue}, 15%, 98%) 0%, hsl({hue}, 10%, 95%) 100%);");
        }
        else
        {
            styles.Add("background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);");
        }

        if (IsDragging)
        {
            styles.Add("transform: rotate(2deg);");
            styles.Add("opacity: 0.8;");
        }

        return string.Join(" ", styles);
    }

    private string GetIconClass()
    {
        if (!string.IsNullOrEmpty(Category.Icon))
        {
            // Check if it's a Font Awesome class
            if (Category.Icon.StartsWith("fas ") || Category.Icon.StartsWith("far ") || Category.Icon.StartsWith("fab "))
                return Category.Icon;

            // Check if it's just the icon name (add fas prefix)
            if (!Category.Icon.Contains(" "))
                return $"fas {Category.Icon}";
        }

        // Default fallback icons based on category properties
        if (Category.HasProducts)
            return "fas fa-folder";

        return "fas fa-folder-plus";
    }

    private string GetTitleClasses()
    {
        var classes = new List<string>();

        if (!Category.IsActive)
            classes.Add("text-muted");

        if (Category.HasProducts)
            classes.Add("fw-bold");

        return string.Join(" ", classes);
    }

    private string GetStatusBadgeClass()
    {
        return Category.IsActive ? "success" : "secondary";
    }

    private void HandleCardClick()
    {
        if (Category.HasProducts && !IsDragging)
        {
            OnToggleExpand.InvokeAsync(Category);
        }
    }

    private void Edit()
    {
        OnEdit.InvokeAsync(Category);
    }

    private void Delete()
    {
        OnDelete.InvokeAsync(Category);
    }

    private void ToggleExpand()
    {
        OnToggleExpand.InvokeAsync(Category);
    }

    private void HandleDragStart(DragEventArgs e)
    {
        IsDragging = true;
        // Use a simpler approach for drag and drop in Blazor
        // The parent component will handle the actual drag logic
    }

    private void HandleDragEnd(DragEventArgs e)
    {
        IsDragging = false;
        StateHasChanged();
    }
}
