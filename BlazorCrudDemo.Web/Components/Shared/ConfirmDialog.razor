@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<div class="confirm-dialog-overlay @(IsVisible ? "visible" : "")" @onclick="OnBackdropClick">
    <div class="confirm-dialog @(Variant.ToString().ToLower())" @onclick:stopPropagation="true" tabindex="-1" id="confirm-dialog-focus">
        <div class="confirm-dialog-header">
            <div class="confirm-dialog-icon">
                @switch (Variant)
                {
                    case DialogVariant.Danger:
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                        break;
                    case DialogVariant.Warning:
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
                            <line x1="12" y1="9" x2="12" y2="13"></line>
                            <line x1="12" y1="17" x2="12.01" y2="17"></line>
                        </svg>
                        break;
                    case DialogVariant.Info:
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <path d="M12 16v-4"></path>
                            <path d="M12 8h.01"></path>
                        </svg>
                        break;
                }
            </div>
            <h3 class="confirm-dialog-title">@Title</h3>
        </div>

        <div class="confirm-dialog-body">
            <p class="confirm-dialog-message">@Message</p>
        </div>

        <div class="confirm-dialog-footer">
            <button class="btn btn-secondary" @onclick="OnCancelClick">@CancelText</button>
            <button class="btn btn-primary @(Variant.ToString().ToLower())" @onclick="OnConfirmClick">@ConfirmText</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public DialogVariant Variant { get; set; } = DialogVariant.Info;
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addConfirmDialogKeyboardSupport",
                DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleKeyDown(string key)
    {
        switch (key)
        {
            case "Escape":
                await OnCancelClick();
                break;
            case "Enter":
                await OnConfirmClick();
                break;
        }
    }

    private async Task OnBackdropClick()
    {
        if (IsVisible)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private async Task OnConfirmClick()
    {
        if (IsVisible)
        {
            await OnConfirm.InvokeAsync();
        }
    }

    private async Task OnCancelClick()
    {
        if (IsVisible)
        {
            await OnCancel.InvokeAsync();
        }
    }
}


@code {
    public enum DialogVariant
    {
        Info,
        Warning,
        Danger
    }
}
