@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="layout-container @(IsDarkMode ? "dark-theme" : "light-theme") @(IsMobile ? "mobile-layout" : "desktop-layout")">
    <!-- Sidebar -->
    <aside class="sidebar @(IsSidebarCollapsed ? "collapsed" : "expanded")" id="main-sidebar">
        <!-- Sidebar Header -->
        <div class="sidebar-header">
            <div class="sidebar-logo">
                @if (!IsSidebarCollapsed)
                {
                    <h3 class="sidebar-title">Blazor CRUD Demo</h3>
                }
                else
                {
                    <i class="bi bi-grid-3x3-gap sidebar-icon-large"></i>
                }
            </div>
            <button class="sidebar-toggle-btn" @onclick="ToggleSidebar" title="@(IsSidebarCollapsed ? "Expand Sidebar" : "Collapse Sidebar")">
                <i class="bi @(IsSidebarCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></i>
            </button>
        </div>

        <!-- Navigation Menu -->
        <div class="sidebar-nav">
            <NavMenu />
        </div>

        <!-- User Profile Section -->
        <div class="sidebar-footer">
            <div class="user-profile">
                <div class="user-avatar">
                    <i class="bi bi-person-circle"></i>
                </div>
                @if (!IsSidebarCollapsed)
                {
                    <div class="user-info">
                        <div class="user-name">Bran Don</div>
                        <div class="user-role">Administrator</div>
                    </div>
                }
            </div>
        </div>
    </aside>

    <!-- Main Content Area -->
    <div class="main-content @(IsSidebarCollapsed ? "sidebar-collapsed" : "sidebar-expanded")">
        <!-- Top Bar -->
        <TopBar IsDarkMode="IsDarkMode"
                NotificationCount="NotificationCount"
                IsDarkModeChanged="HandleThemeChanged"
                OnSearchCommand="HandleSearchCommand"
                OnToggleFullscreen="ToggleFullscreen" />

        <!-- Breadcrumb Navigation -->
        <div class="breadcrumb-container">
            <BreadcrumbNavigation />
        </div>

        <!-- Page Content -->
        <main class="page-content">
            @if (ShowSearchPalette)
            {
                <SearchCommandPalette @bind-Visible="ShowSearchPalette" OnCommandSelected="HandleCommandSelected" />
            }
            @Body
        </main>

        <!-- Footer -->
        <Footer />
    </div>

    <!-- Mobile Overlay -->
    @if (IsMobile && ShowMobileMenu)
    {
        <div class="mobile-overlay" @onclick="CloseMobileMenu"></div>
    }
</div>

<!-- Search Command Palette -->
<SearchCommandPalette @bind-Visible="ShowSearchPalette" OnCommandSelected="HandleCommandSelected" />

@code {
    private bool IsSidebarCollapsed { get; set; }
    private bool IsDarkMode { get; set; }
    private bool IsMobile { get; set; }
    private bool ShowMobileMenu { get; set; }
    private bool ShowSearchPalette { get; set; }
    private int NotificationCount { get; set; } = 3;

    protected override void OnInitialized()
    {
        // Initialize theme from localStorage or default to light
        IsDarkMode = GetStoredTheme();
        IsMobile = false; // Default to desktop, will be updated in OnAfterRenderAsync

        // Keyboard shortcuts will be initialized in OnAfterRenderAsync
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize keyboard shortcuts after rendering
            var dotNetObjectRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initializeKeyboardShortcuts", dotNetObjectRef);

            // Initialize responsive detection after rendering
            await JSRuntime.InvokeVoidAsync("initializeResponsiveDetection", dotNetObjectRef);

            // Update mobile state after rendering
            await UpdateMobileStateAsync();
        }
    }

    private bool GetStoredTheme()
    {
        // In a real app, this would check localStorage
        return false; // Default to light theme
    }

    private async Task<bool> IsMobileDeviceAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<bool>("isMobileDevice");
        }
        catch
        {
            // Fallback for server-side rendering
            return System.OperatingSystem.IsBrowser() ? await JSRuntime.InvokeAsync<bool>("isMobileDevice") : false;
        }
    }

    private async Task UpdateMobileStateAsync()
    {
        try
        {
            var wasMobile = IsMobile;
            IsMobile = await IsMobileDeviceAsync();

            if (wasMobile != IsMobile)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            // Log error in a real app
            Console.WriteLine($"Error updating mobile state: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task UpdateMobileState()
    {
        await UpdateMobileStateAsync();
    }

    private void ToggleSidebar()
    {
        IsSidebarCollapsed = !IsSidebarCollapsed;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleFullscreen()
    {
        JSRuntime.InvokeVoidAsync("toggleFullscreen");
    }

    private void HandleSearchCommand()
    {
        ShowSearchPalette = true;
        InvokeAsync(StateHasChanged);
    }

    private void HandleCommandSelected(string command)
    {
        ShowSearchPalette = false;
        // Navigate to the selected command/page
        Navigation.NavigateTo(command);
        InvokeAsync(StateHasChanged);
    }

    private void HandleThemeChanged()
    {
        IsDarkMode = !IsDarkMode;
        // In a real app, save to localStorage
        InvokeAsync(StateHasChanged);
    }

    private void CloseMobileMenu()
    {
        ShowMobileMenu = false;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void OnKeyboardShortcut(string shortcut)
    {
        switch (shortcut)
        {
            case "ctrl+k":
                HandleSearchCommand();
                break;
            case "ctrl+b":
                ToggleSidebar();
                break;
            case "ctrl+shift+l":
                IsDarkMode = !IsDarkMode;
                // In a real app, save to localStorage
                InvokeAsync(StateHasChanged);
                break;
        }
    }
}

<style>
    .layout-container {
        display: flex;
        min-height: 100vh;
        background: var(--bs-body-bg);
        transition: all 0.3s ease;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 280px;
        background: var(--sidebar-bg, #2c3e50);
        color: var(--sidebar-text, white);
        transition: width 0.3s ease;
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        z-index: 1000;
        box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .sidebar.collapsed {
        width: 70px;
    }

    .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        height: 70px;
    }

    .sidebar-logo {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .sidebar-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
    }

    .sidebar-icon-large {
        font-size: 1.5rem;
        color: var(--primary-color, #3498db);
    }

    .sidebar-toggle-btn {
        background: none;
        border: none;
        color: var(--sidebar-text, white);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: background-color 0.2s ease;
    }

    .sidebar-toggle-btn:hover {
        background-color: rgba(255,255,255,0.1);
    }

    .sidebar-nav {
        flex: 1;
        overflow-y: auto;
        padding: 1rem 0;
    }

    .sidebar-footer {
        border-top: 1px solid rgba(255,255,255,0.1);
        padding: 1rem;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color, #3498db);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
    }

    .user-info {
        flex: 1;
        min-width: 0;
    }

    .user-name {
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .user-role {
        font-size: 0.875rem;
        opacity: 0.8;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Main Content */
    .main-content {
        flex: 1;
        margin-left: 280px;
        transition: margin-left 0.3s ease;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .main-content.sidebar-collapsed {
        margin-left: 70px;
    }

    .breadcrumb-container {
        background: var(--breadcrumb-bg, #f8f9fa);
        border-bottom: 1px solid var(--border-color, #dee2e6);
        padding: 0.75rem 1.5rem;
    }

    .page-content {
        flex: 1;
        padding: 1.5rem;
        overflow-y: auto;
    }

    /* Desktop Layout - Ensure sidebar is visible by default */
    .desktop-layout .sidebar {
        transform: translateX(0) !important;
    }

    /* Mobile Layout - Hide sidebar off-screen by default */
    .mobile-layout .sidebar {
        transform: translateX(-100%);
    }

    .mobile-layout.sidebar-open .sidebar {
        transform: translateX(0);
    }

    .mobile-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        z-index: 999;
    }

    /* Theme Variables */
    :root {
        --sidebar-bg: #2c3e50;
        --sidebar-text: white;
        --primary-color: #3498db;
        --breadcrumb-bg: #f8f9fa;
        --border-color: #dee2e6;
    }

    .dark-theme {
        --sidebar-bg: #1a1a1a;
        --sidebar-text: #ffffff;
        --breadcrumb-bg: #2d3748;
        --border-color: #4a5568;
        --bs-body-bg: #1a202c;
        --bs-body-color: #e2e8f0;
    }

</style>
