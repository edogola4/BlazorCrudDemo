@page "/admin/users"
@attribute [Authorize(Policy = "AdminOnly")]
@using BlazorCrudDemo.Web.Services
@using BlazorCrudDemo.Shared.DTOs
@inject IUserService UserService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>User Management</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">User Management</h1>
            <p class="text-muted">Manage system users, roles, and permissions</p>
        </div>
        <button class="btn btn-primary" @onclick="ShowCreateUserModal">
            <i class="bi bi-person-plus me-2"></i>Add New User
        </button>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Users
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@totalUsers</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-people-fill fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Active Users
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@activeUsers</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-person-check-fill fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Administrators
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@adminUsers</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-shield-check fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Inactive Users
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@inactiveUsers</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-person-dash-fill fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Users</h6>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <input type="text" class="form-control" placeholder="Search users..." @bind="searchTerm" @bind:event="oninput" />
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="roleFilter">
                        <option value="">All Roles</option>
                        <option value="Admin">Administrators</option>
                        <option value="User">Users</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="statusFilter">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" @bind="sortBy">
                        <option value="created">Created Date</option>
                        <option value="name">Name</option>
                        <option value="email">Email</option>
                        <option value="lastLogin">Last Login</option>
                    </select>
                </div>
            </div>

            <!-- Users Table -->
            @if (isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading users...</p>
                </div>
            }
            else if (!filteredUsers.Any())
            {
                <div class="text-center py-4">
                    <i class="bi bi-people display-4 text-muted"></i>
                    <p class="text-muted mt-2">No users found</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>User</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Last Login</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in filteredUsers)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="user-avatar-small me-3">
                                                @if (!string.IsNullOrEmpty(user.ProfileImageUrl))
                                                {
                                                    <img src="@user.ProfileImageUrl" alt="Profile" class="profile-image-small" />
                                                }
                                                else
                                                {
                                                    <i class="bi bi-person-circle"></i>
                                                }
                                            </div>
                                            <div>
                                                <div class="font-weight-bold">
                                                    @(string.IsNullOrEmpty(user.FirstName + user.LastName)
                                                        ? user.Email.Split('@')[0]
                                                        : $"{user.FirstName} {user.LastName}")
                                                </div>
                                                <div class="text-muted small">@user.Email</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @foreach (var role in user.Roles)
                                        {
                                            <span class="badge @(role == "Admin" ? "bg-danger" : "bg-primary") me-1">@role</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @(user.IsActive ? "bg-success" : "bg-secondary")">
                                            @(user.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>@user.CreatedDate.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        @(user.LastLoginDate.HasValue
                                            ? user.LastLoginDate.Value.ToString("MMM dd, yyyy HH:mm")
                                            : "Never")
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditUser(user.Id)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ViewUserDetails(user.Id)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ToggleUserStatus(user)">
                                                <i class="bi @(user.IsActive ? "bi-person-dash" : "bi-person-check")"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <nav aria-label="User pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="() => ChangePage(currentPage - 1)" @onclick:preventDefault>Previous</a>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <a class="page-link" @onclick="() => ChangePage(i)" @onclick:preventDefault>@i</a>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="() => ChangePage(currentPage + 1)" @onclick:preventDefault>Next</a>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

<!-- Create User Modal -->
@if (showCreateModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New User</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateUserModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newUserModel" OnValidSubmit="HandleCreateUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">First Name</label>
                                <InputText class="form-control" @bind-Value="newUserModel.FirstName" />
                                <ValidationMessage For="() => newUserModel.FirstName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Last Name</label>
                                <InputText class="form-control" @bind-Value="newUserModel.LastName" />
                                <ValidationMessage For="() => newUserModel.LastName" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email Address</label>
                            <InputText class="form-control" @bind-Value="newUserModel.Email" />
                            <ValidationMessage For="() => newUserModel.Email" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" class="form-control" @bind-Value="newUserModel.Password" />
                            <ValidationMessage For="() => newUserModel.Password" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Confirm Password</label>
                            <InputText type="password" class="form-control" @bind-Value="newUserModel.ConfirmPassword" />
                            <ValidationMessage For="() => newUserModel.ConfirmPassword" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Role</label>
                            <InputSelect class="form-select" @bind-Value="newUserModel.Role">
                                <option value="User">User</option>
                                <option value="Admin">Administrator</option>
                            </InputSelect>
                            <ValidationMessage For="() => newUserModel.Role" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateUserModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleCreateUser" disabled="@isCreating">
                        @if (isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Create User
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUserDto> users = new();
    private IEnumerable<ApplicationUserDto> filteredUsers = new List<ApplicationUserDto>();
    private string searchTerm = "";
    private string roleFilter = "";
    private string statusFilter = "";
    private string sortBy = "created";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalUsers = 0;
    private int activeUsers = 0;
    private int adminUsers = 0;
    private int inactiveUsers = 0;
    private int totalPages = 0;
    private bool isLoading = false;
    private bool showCreateModal = false;
    private bool isCreating = false;
    private ApplicationUserDto? currentUser;

    private RegisterDto newUserModel = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthenticationService.GetCurrentUserAsync();
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        isLoading = true;
        try
        {
            users = await UserService.GetAllUsersAsync();
            ApplyFilters();
            CalculateStats();
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredUsers = users.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredUsers = filteredUsers.Where(u =>
                u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(u.FirstName) && u.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(u.LastName) && u.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        // Apply role filter
        if (!string.IsNullOrEmpty(roleFilter))
        {
            filteredUsers = filteredUsers.Where(u => u.Roles.Contains(roleFilter));
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            filteredUsers = filteredUsers.Where(u => statusFilter == "active" ? u.IsActive : !u.IsActive);
        }

        // Apply sorting
        filteredUsers = sortBy switch
        {
            "name" => filteredUsers.OrderBy(u => u.FirstName).ThenBy(u => u.LastName),
            "email" => filteredUsers.OrderBy(u => u.Email),
            "lastLogin" => filteredUsers.OrderByDescending(u => u.LastLoginDate),
            _ => filteredUsers.OrderByDescending(u => u.CreatedDate)
        };

        // Apply pagination
        totalUsers = filteredUsers.Count();
        totalPages = (int)Math.Ceiling(totalUsers / (double)pageSize);
        filteredUsers = filteredUsers.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void CalculateStats()
    {
        totalUsers = users.Count;
        activeUsers = users.Count(u => u.IsActive);
        adminUsers = users.Count(u => u.Roles.Contains("Admin"));
        inactiveUsers = totalUsers - activeUsers;
    }

    private void ShowCreateUserModal()
    {
        newUserModel = new RegisterDto();
        showCreateModal = true;
    }

    private void CloseCreateUserModal()
    {
        showCreateModal = false;
        newUserModel = new RegisterDto();
    }

    private async Task HandleCreateUser()
    {
        isCreating = true;
        try
        {
            var result = await UserService.CreateUserAsync(newUserModel, currentUser?.Id ?? "system");
            if (result.Success)
            {
                CloseCreateUserModal();
                await LoadUsersAsync();
            }
            else
            {
                // Show error message
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isCreating = false;
        }
    }

    private void EditUser(string userId)
    {
        Navigation.NavigateTo($"/admin/users/{userId}/edit");
    }

    private void ViewUserDetails(string userId)
    {
        Navigation.NavigateTo($"/admin/users/{userId}");
    }

    private async Task ToggleUserStatus(ApplicationUserDto user)
    {
        var result = await UserService.UpdateUserAsync(user.Id, new UpdateUserDto
        {
            IsActive = !user.IsActive
        }, currentUser?.Id ?? "system");

        if (result.Success)
        {
            await LoadUsersAsync();
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyFilters();
        }
    }

    // Watchers for filters
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        ApplyFilters();
    }

    private void OnRoleFilterChanged(ChangeEventArgs e)
    {
        roleFilter = e.Value?.ToString() ?? "";
        currentPage = 1;
        ApplyFilters();
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? "";
        currentPage = 1;
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "created";
        currentPage = 1;
        ApplyFilters();
    }
}

<style>
    .user-avatar-small {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        flex-shrink: 0;
        overflow: hidden;
    }

    .profile-image-small {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
    }

    .nav-separator {
        margin: 1rem 0.5rem 0.5rem;
        padding: 0 0.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 0.5rem;
    }

    .nav-separator span {
        font-size: 0.75rem;
        font-weight: 600;
        color: var(--sidebar-text, white);
        opacity: 0.7;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .btn-group .btn {
        margin-right: 0.25rem;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }

    .modal-content {
        border-radius: 0.5rem;
        border: none;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
</style>
