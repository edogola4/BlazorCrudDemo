@using System.Collections.Generic
@using System.Linq
@using BlazorCrudDemo.Web.Models

<div class="activity-feed">
    <div class="activity-header">
        <h3>Recent Activities</h3>
        @if (ShowViewAll)
        {
            <a href="/activities" class="view-all">View All</a>
        }
    </div>
    
    <div class="activity-list">
        @if (Activities == null || !Activities.Any())
        {
            <div class="no-activities">
                <i class="fas fa-inbox"></i>
                <p>No activities to display</p>
            </div>
        }
        else
        {
            <div class="timeline">
                @foreach (var activity in Activities.Take(MaxItems))
                {
                    <div class="timeline-item">
                        <div class="timeline-marker">
                            <i class="fas @GetActivityIcon(activity.Type)"></i>
                        </div>
                        <div class="timeline-content">
                            <div class="timeline-header">
                                <span class="activity-title">@activity.Title</span>
                                <span class="activity-time" title="@activity.Timestamp.ToString("g")">@GetTimeAgo(activity.Timestamp)</span>
                            </div>
                            @if (!string.IsNullOrEmpty(activity.Description))
                            {
                                <p class="activity-description">@activity.Description</p>
                            }
                            @if (!string.IsNullOrEmpty(activity.Link))
                            {
                                <a href="@activity.Link" class="activity-link">View details <i class="fas fa-arrow-right"></i></a>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .activity-feed {
        background: white;
        border-radius: 10px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .activity-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e2e8f0;
    }

        .activity-header h3 {
            margin: 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
        }

    .view-all {
        color: #3b82f6;
        font-size: 0.875rem;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }

        .view-all:hover {
            color: #2563eb;
            text-decoration: underline;
        }

    .activity-list {
        flex: 1;
        overflow-y: auto;
        padding: 1rem 0;
    }

    .no-activities {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        text-align: center;
        color: #94a3b8;
    }

        .no-activities i {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .no-activities p {
            margin: 0;
            font-size: 0.9375rem;
        }

    .timeline {
        position: relative;
        padding: 0 1.5rem;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 1.5rem;
        padding-left: 2rem;
        border-left: 2px solid #e2e8f0;
    }

        .timeline-item:last-child {
            padding-bottom: 0.5rem;
            border-left-color: transparent;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -6px;
            top: 0;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #3b82f6;
            z-index: 1;
        }

    .timeline-marker {
        position: absolute;
        left: -2.5rem;
        top: 0;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        background: #e0f2fe;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #0ea5e9;
        font-size: 0.75rem;
    }

    .timeline-content {
        padding: 0.5rem 0;
    }

    .timeline-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.25rem;
    }

    .activity-title {
        font-weight: 500;
        color: #1e293b;
        font-size: 0.9375rem;
        line-height: 1.4;
    }

    .activity-time {
        font-size: 0.75rem;
        color: #94a3b8;
        white-space: nowrap;
        margin-left: 0.5rem;
    }

    .activity-description {
        margin: 0.25rem 0 0.5rem;
        color: #64748b;
        font-size: 0.875rem;
        line-height: 1.5;
    }

    .activity-link {
        display: inline-flex;
        align-items: center;
        font-size: 0.8125rem;
        color: #3b82f6;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }

        .activity-link i {
            margin-left: 0.25rem;
            font-size: 0.625rem;
            transition: transform 0.2s;
        }

        .activity-link:hover {
            color: #2563eb;
        }

            .activity-link:hover i {
                transform: translateX(2px);
            }
</style>

@code {
    [Parameter] public List<ActivityItem> Activities { get; set; } = new();
    [Parameter] public int MaxItems { get; set; } = 5;
    [Parameter] public bool ShowViewAll { get; set; } = true;

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalSeconds < 60)
            return "just now";
        
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hour{(timeSpan.TotalHours >= 2 ? "s" : "")} ago";
        
        if (timeSpan.TotalDays < 30)
            return $"{(int)timeSpan.TotalDays} day{(timeSpan.TotalDays >= 2 ? "s" : "")} ago";
        
        if (timeSpan.TotalDays < 365)
            return dateTime.ToString("MMM d");
        
        return dateTime.ToString("MMM d, yyyy");
    }

    private string GetActivityIcon(string activityType)
    {
        return activityType switch
        {
            "product.added" => "fa-box-open",
            "product.updated" => "fa-edit",
            "product.low-stock" => "fa-exclamation-triangle",
            "category.added" => "fa-folder-plus",
            "category.updated" => "fa-folder",
            "user.login" => "fa-sign-in-alt",
            "user.logout" => "fa-sign-out-alt",
            _ => "fa-info-circle"
        };
    }
}
