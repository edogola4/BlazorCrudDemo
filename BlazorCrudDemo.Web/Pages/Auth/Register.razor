@using Microsoft.AspNetCore.Authorization
@using BlazorCrudDemo.Shared.DTOs
@using BlazorCrudDemo.Web.Services
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Register</PageTitle>

<div class="auth-card card">
    <div class="auth-header card-header">
        <h4 class="mb-0"><i class="fas fa-user-plus me-2"></i>Register</h4>
    </div>
    <div class="auth-body card-body">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
            </div>
        }

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="firstName" class="form-label">First Name</label>
                    <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" placeholder="Enter your first name" />
                    <ValidationMessage For="@(() => registerModel.FirstName)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="lastName" class="form-label">Last Name</label>
                    <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" placeholder="Enter your last name" />
                    <ValidationMessage For="@(() => registerModel.LastName)" />
                </div>
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Enter your email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Enter your password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
                <div class="form-text">
                    Password must be at least 8 characters and contain uppercase, lowercase, number, and special character.
                </div>
            </div>

            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm your password" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <div class="mb-3">
                <label for="role" class="form-label">Account Type</label>
                <InputSelect id="role" class="form-select" @bind-Value="registerModel.Role">
                    <option value="User">User</option>
                    @if (showAdminOption)
                    {
                        <option value="Admin">Administrator</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => registerModel.Role)" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-success btn-auth" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    Register
                </button>
            </div>

            <div class="auth-links">
                <span>Already have an account? </span>
                <a href="/auth/login" class="text-decoration-none">Login here</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private RegisterDto registerModel = new();
    private bool isLoading = false;
    private bool showAdminOption = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var isAuthenticated = await AuthenticationService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        // For demo purposes, allow admin registration if no admin exists
        // In production, this should be handled differently
        showAdminOption = true;
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var result = await AuthenticationService.RegisterAsync(registerModel);

            if (result.Success)
            {
                // Auto-login after successful registration
                var loginResult = await AuthenticationService.LoginAsync(new LoginDto
                {
                    Email = registerModel.Email,
                    Password = registerModel.Password,
                    RememberMe = false
                });

                if (loginResult.Success)
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", loginResult.AccessToken);
                    Navigation.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    // Registration succeeded but login failed - redirect to login
                    Navigation.NavigateTo("/auth/login");
                }
            }
            else
            {
                errorMessage = result.Message ?? "Registration failed";
                if (result.Errors?.Any() == true)
                {
                    errorMessage = string.Join(", ", result.Errors);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
